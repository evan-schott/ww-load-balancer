// Code generated by capnpc-go. DO NOT EDIT.

package handler

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
)

type Handler capnp.Client

// Handler_TypeID is the unique identifier for the type Handler.
const Handler_TypeID = 0xb3723bd99005afaf

func (c Handler) Handle(ctx context.Context, params func(Handler_handle_Params) error) (Handler_handle_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb3723bd99005afaf,
			MethodID:      0,
			InterfaceName: "handler/handler.capnp:Handler",
			MethodName:    "handle",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Handler_handle_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Handler_handle_Results_Future{Future: ans.Future()}, release

}

func (c Handler) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Handler) String() string {
	return "Handler(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Handler) AddRef() Handler {
	return Handler(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Handler) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Handler) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Handler) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Handler) DecodeFromPtr(p capnp.Ptr) Handler {
	return Handler(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Handler) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Handler) IsSame(other Handler) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Handler) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Handler) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Handler_Server is a Handler with a local implementation.
type Handler_Server interface {
	Handle(context.Context, Handler_handle) error
}

// Handler_NewServer creates a new Server from an implementation of Handler_Server.
func Handler_NewServer(s Handler_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Handler_Methods(nil, s), s, c)
}

// Handler_ServerToClient creates a new Client from an implementation of Handler_Server.
// The caller is responsible for calling Release on the returned Client.
func Handler_ServerToClient(s Handler_Server) Handler {
	return Handler(capnp.NewClient(Handler_NewServer(s)))
}

// Handler_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Handler_Methods(methods []server.Method, s Handler_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb3723bd99005afaf,
			MethodID:      0,
			InterfaceName: "handler/handler.capnp:Handler",
			MethodName:    "handle",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Handle(ctx, Handler_handle{call})
		},
	})

	return methods
}

// Handler_handle holds the state for a server call to Handler.handle.
// See server.Call for documentation.
type Handler_handle struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Handler_handle) Args() Handler_handle_Params {
	return Handler_handle_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Handler_handle) AllocResults() (Handler_handle_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Handler_handle_Results(r), err
}

// Handler_List is a list of Handler.
type Handler_List = capnp.CapList[Handler]

// NewHandler creates a new list of Handler.
func NewHandler_List(s *capnp.Segment, sz int32) (Handler_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Handler](l), err
}

type Handler_handle_Params capnp.Struct

// Handler_handle_Params_TypeID is the unique identifier for the type Handler_handle_Params.
const Handler_handle_Params_TypeID = 0xd22c0e04ce676422

func NewHandler_handle_Params(s *capnp.Segment) (Handler_handle_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Handler_handle_Params(st), err
}

func NewRootHandler_handle_Params(s *capnp.Segment) (Handler_handle_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Handler_handle_Params(st), err
}

func ReadRootHandler_handle_Params(msg *capnp.Message) (Handler_handle_Params, error) {
	root, err := msg.Root()
	return Handler_handle_Params(root.Struct()), err
}

func (s Handler_handle_Params) String() string {
	str, _ := text.Marshal(0xd22c0e04ce676422, capnp.Struct(s))
	return str
}

func (s Handler_handle_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Handler_handle_Params) DecodeFromPtr(p capnp.Ptr) Handler_handle_Params {
	return Handler_handle_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Handler_handle_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Handler_handle_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Handler_handle_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Handler_handle_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Handler_handle_Params) Request() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Handler_handle_Params) HasRequest() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Handler_handle_Params) RequestBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Handler_handle_Params) SetRequest(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// Handler_handle_Params_List is a list of Handler_handle_Params.
type Handler_handle_Params_List = capnp.StructList[Handler_handle_Params]

// NewHandler_handle_Params creates a new list of Handler_handle_Params.
func NewHandler_handle_Params_List(s *capnp.Segment, sz int32) (Handler_handle_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Handler_handle_Params](l), err
}

// Handler_handle_Params_Future is a wrapper for a Handler_handle_Params promised by a client call.
type Handler_handle_Params_Future struct{ *capnp.Future }

func (f Handler_handle_Params_Future) Struct() (Handler_handle_Params, error) {
	p, err := f.Future.Ptr()
	return Handler_handle_Params(p.Struct()), err
}

type Handler_handle_Results capnp.Struct

// Handler_handle_Results_TypeID is the unique identifier for the type Handler_handle_Results.
const Handler_handle_Results_TypeID = 0xa96a75bef3b3b711

func NewHandler_handle_Results(s *capnp.Segment) (Handler_handle_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Handler_handle_Results(st), err
}

func NewRootHandler_handle_Results(s *capnp.Segment) (Handler_handle_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Handler_handle_Results(st), err
}

func ReadRootHandler_handle_Results(msg *capnp.Message) (Handler_handle_Results, error) {
	root, err := msg.Root()
	return Handler_handle_Results(root.Struct()), err
}

func (s Handler_handle_Results) String() string {
	str, _ := text.Marshal(0xa96a75bef3b3b711, capnp.Struct(s))
	return str
}

func (s Handler_handle_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Handler_handle_Results) DecodeFromPtr(p capnp.Ptr) Handler_handle_Results {
	return Handler_handle_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Handler_handle_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Handler_handle_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Handler_handle_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Handler_handle_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Handler_handle_Results) Response() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Handler_handle_Results) HasResponse() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Handler_handle_Results) ResponseBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Handler_handle_Results) SetResponse(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// Handler_handle_Results_List is a list of Handler_handle_Results.
type Handler_handle_Results_List = capnp.StructList[Handler_handle_Results]

// NewHandler_handle_Results creates a new list of Handler_handle_Results.
func NewHandler_handle_Results_List(s *capnp.Segment, sz int32) (Handler_handle_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Handler_handle_Results](l), err
}

// Handler_handle_Results_Future is a wrapper for a Handler_handle_Results promised by a client call.
type Handler_handle_Results_Future struct{ *capnp.Future }

func (f Handler_handle_Results_Future) Struct() (Handler_handle_Results, error) {
	p, err := f.Future.Ptr()
	return Handler_handle_Results(p.Struct()), err
}

const schema_b8ace6235fa2dd9f = "x\xda\x12\x98\xe8\xc0b\xc8\x9b\xcf\xc4\xc0\x14(\xc3\xca" +
	"\xf6_p\xfb\xe6\xcf\xfbJ\xb3V2\x08\xca120" +
	"\xb02\xb230\x18\xcb2f120\x0ak2\xda" +
	"30\xfe_\xbf\x9eu\xc2M\xeb\xa2\xcd\x0c\x82b\xcc" +
	"\xff\xe7\xdf]\x14\xaf\xfcl\xcd\x0e\x06\x06Fa_\xc6" +
	"O\xc2\x91 \xf5\xc2\xa1\x8c\xee\xc2\xb5 \xd6\x7f\xa5\x94" +
	"\xf4s,|:\x97\x90MKeL\x02\x99V\xc8h" +
	"\xcf\xa0\xfb?#1/%'\xb5H\x9f\x05\xca\xd0K" +
	"N,\xc8+\xb0\xf2\x80\xf2 \xa2*A\xa9\xc5\xfc\xa5" +
	"9%\xc5\x81,\xcc,\x0c\x0c,\x8c\x0c\x0c\x82\xbc^" +
	"\x0c\x0c\x81<\xcc\x8c\x81\x12L\x8c\xff\x8bR\x8b\x0b\xf2" +
	"\xf3\x8aS\x19\x18\x18\x18y\x18\x98\x18y\x18\x18\xe1&" +
	"3\xa1\x9b,\x0f\xe6\x0602\x06\xb20\xb3\"\xb9\x91" +
	"\x11\xe6uAA+\x06&AVv{\x88N\x07\xc6" +
	"\x00FF\"\x1d\x1a\x90X\xc4\x9e\x98\x8b\xe2N'\x06" +
	"\x86@\x0ef\xc6@\x11&\xc6\xfa\xa2\xd4\xc2\xd2\xd4\xe2" +
	"\x12\x98\x1b\x01\x01\x00\x00\xff\xff\x09\x0be&"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_b8ace6235fa2dd9f,
		Nodes: []uint64{
			0xa96a75bef3b3b711,
			0xb3723bd99005afaf,
			0xd22c0e04ce676422,
		},
		Compressed: true,
	})
}

// Code generated by capnpc-go. DO NOT EDIT.

package echo

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	fmt "fmt"
)

type Echo capnp.Client

// Echo_TypeID is the unique identifier for the type Echo.
const Echo_TypeID = 0xe49731bba3f92391

func (c Echo) Send(ctx context.Context, params func(Echo_send_Params) error) (Echo_send_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe49731bba3f92391,
			MethodID:      0,
			InterfaceName: "foo/echo/echo.capnp:Echo",
			MethodName:    "send",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Echo_send_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Echo_send_Results_Future{Future: ans.Future()}, release
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Echo) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Echo) AddRef() Echo {
	return Echo(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Echo) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Echo) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Echo) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Echo) DecodeFromPtr(p capnp.Ptr) Echo {
	return Echo(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Echo) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Echo) IsSame(other Echo) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Echo) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Echo) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
} // A Echo_Server is a Echo with a local implementation.
type Echo_Server interface {
	Send(context.Context, Echo_send) error
}

// Echo_NewServer creates a new Server from an implementation of Echo_Server.
func Echo_NewServer(s Echo_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Echo_Methods(nil, s), s, c)
}

// Echo_ServerToClient creates a new Client from an implementation of Echo_Server.
// The caller is responsible for calling Release on the returned Client.
func Echo_ServerToClient(s Echo_Server) Echo {
	return Echo(capnp.NewClient(Echo_NewServer(s)))
}

// Echo_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Echo_Methods(methods []server.Method, s Echo_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe49731bba3f92391,
			MethodID:      0,
			InterfaceName: "foo/echo/echo.capnp:Echo",
			MethodName:    "send",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Send(ctx, Echo_send{call})
		},
	})

	return methods
}

// Echo_send holds the state for a server call to Echo.send.
// See server.Call for documentation.
type Echo_send struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Echo_send) Args() Echo_send_Params {
	return Echo_send_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Echo_send) AllocResults() (Echo_send_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Echo_send_Results(r), err
}

// Echo_List is a list of Echo.
type Echo_List = capnp.CapList[Echo]

// NewEcho creates a new list of Echo.
func NewEcho_List(s *capnp.Segment, sz int32) (Echo_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Echo](l), err
}

type Echo_send_Params capnp.Struct

// Echo_send_Params_TypeID is the unique identifier for the type Echo_send_Params.
const Echo_send_Params_TypeID = 0xeed2c21449ba16ff

func NewEcho_send_Params(s *capnp.Segment) (Echo_send_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Echo_send_Params(st), err
}

func NewRootEcho_send_Params(s *capnp.Segment) (Echo_send_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Echo_send_Params(st), err
}

func ReadRootEcho_send_Params(msg *capnp.Message) (Echo_send_Params, error) {
	root, err := msg.Root()
	return Echo_send_Params(root.Struct()), err
}

func (s Echo_send_Params) String() string {
	str, _ := text.Marshal(0xeed2c21449ba16ff, capnp.Struct(s))
	return str
}

func (s Echo_send_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Echo_send_Params) DecodeFromPtr(p capnp.Ptr) Echo_send_Params {
	return Echo_send_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Echo_send_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Echo_send_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Echo_send_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Echo_send_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Echo_send_Params) Msg() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Echo_send_Params) HasMsg() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Echo_send_Params) MsgBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Echo_send_Params) SetMsg(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// Echo_send_Params_List is a list of Echo_send_Params.
type Echo_send_Params_List = capnp.StructList[Echo_send_Params]

// NewEcho_send_Params creates a new list of Echo_send_Params.
func NewEcho_send_Params_List(s *capnp.Segment, sz int32) (Echo_send_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Echo_send_Params](l), err
}

// Echo_send_Params_Future is a wrapper for a Echo_send_Params promised by a client call.
type Echo_send_Params_Future struct{ *capnp.Future }

func (f Echo_send_Params_Future) Struct() (Echo_send_Params, error) {
	p, err := f.Future.Ptr()
	return Echo_send_Params(p.Struct()), err
}

type Echo_send_Results capnp.Struct

// Echo_send_Results_TypeID is the unique identifier for the type Echo_send_Results.
const Echo_send_Results_TypeID = 0xade20218703ef27d

func NewEcho_send_Results(s *capnp.Segment) (Echo_send_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Echo_send_Results(st), err
}

func NewRootEcho_send_Results(s *capnp.Segment) (Echo_send_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Echo_send_Results(st), err
}

func ReadRootEcho_send_Results(msg *capnp.Message) (Echo_send_Results, error) {
	root, err := msg.Root()
	return Echo_send_Results(root.Struct()), err
}

func (s Echo_send_Results) String() string {
	str, _ := text.Marshal(0xade20218703ef27d, capnp.Struct(s))
	return str
}

func (s Echo_send_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Echo_send_Results) DecodeFromPtr(p capnp.Ptr) Echo_send_Results {
	return Echo_send_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Echo_send_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Echo_send_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Echo_send_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Echo_send_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Echo_send_Results) Response() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Echo_send_Results) HasResponse() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Echo_send_Results) ResponseBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Echo_send_Results) SetResponse(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// Echo_send_Results_List is a list of Echo_send_Results.
type Echo_send_Results_List = capnp.StructList[Echo_send_Results]

// NewEcho_send_Results creates a new list of Echo_send_Results.
func NewEcho_send_Results_List(s *capnp.Segment, sz int32) (Echo_send_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Echo_send_Results](l), err
}

// Echo_send_Results_Future is a wrapper for a Echo_send_Results promised by a client call.
type Echo_send_Results_Future struct{ *capnp.Future }

func (f Echo_send_Results_Future) Struct() (Echo_send_Results, error) {
	p, err := f.Future.Ptr()
	return Echo_send_Results(p.Struct()), err
}

const schema_8d728f3bbdc2c9fe = "x\xda\x12\xe8w`1\xe4\xcdgb`\x0a\x94ae" +
	"\xfb_\xfb\xc9\xae@\x82\xe9\xd1Z\x06AIF\x06\x06" +
	"VFv\x06\x06cYF#F\x06FaUF{" +
	"\x06\xc6\xff\x13\x95\x7f.\xdem8\xfd\x09\x83\xa0\x08\xf3" +
	"\xff\x7f'\x0f\xed\xb5\xee/\xeae``\x14\xf6d<" +
	"%\x1c\x0aR/\x1c\xc8\xe8.\\\x09b\xfd\xff/\xb6" +
	"\xcbS\xe4\xd0\xa5w\xc8\xa6%2j\x81L\xcbd\xb4" +
	"g\xd0\xfd\x9f\x96\x9f\xaf\x9f\x9a\x9c\x91\xcf\x0c&\xf5\x92" +
	"\x13\x0b\xf2\x0a\xac\\A\xcc\xe2\xd4\xbc\x14\x95\xa0T\xf9" +
	"\xe2\xd2\x9c\x92\xe2@\x16f\x16\x06\x06\x16F\x06\x06A" +
	"^/\x06\x86@\x1ef\xc6@\x09&\xc6\xffE\xa9\xc5" +
	"\x05\xf9y\xc5\xa9\x0c\x0c\x0c\x8c<\x0cL\x8c<\x0c\x8c" +
	"p#\x99\xd0\x8dd`\x08`d\x0cdafEr" +
	"\x18#\xcc\xbf\x82\x82Z\x0cL\x82\xac\xec\xfc {\x1d" +
	"\x18\x03\x18\x19\x09\xb9- \x91\xbf(1\x17\xc5iJ" +
	"\x0c\x0c\x81\x1c\xcc\x8c\x81\"L\x8c\xec\xb9\xc5\xe90'" +
	"\x01\x02\x00\x00\xff\xff\xc8\xd5[3"

func init() {
	schemas.Register(schema_8d728f3bbdc2c9fe,
		0xade20218703ef27d,
		0xe49731bba3f92391,
		0xeed2c21449ba16ff)
}
